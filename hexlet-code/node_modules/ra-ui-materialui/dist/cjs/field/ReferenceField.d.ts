import { ReactNode } from 'react';
import PropTypes from 'prop-types';
import { SxProps } from '@mui/material';
import { UseReferenceResult, LinkToType, Identifier, RaRecord } from 'ra-core';
import { UseQueryOptions } from 'react-query';
import { FieldProps } from './types';
/**
 * Fetch reference record, and render its representation, or delegate rendering to child component.
 *
 * The reference prop should be the name of one of the <Resource> components
 * added as <Admin> child.
 *
 * @example // using recordRepresentation
 * <ReferenceField label="User" source="userId" reference="users" />
 *
 * @example // using a Field component to represent the record
 * <ReferenceField label="User" source="userId" reference="users">
 *     <TextField source="name" />
 * </ReferenceField>
 *
 * @example // By default, includes a link to the <Edit> page of the related record
 * // (`/users/:userId` in the previous example).
 * // Set the `link` prop to "show" to link to the <Show> page instead.
 * <ReferenceField label="User" source="userId" reference="users" link="show" />
 *
 * @example // You can also prevent `<ReferenceField>` from adding link to children
 * // by setting `link` to false.
 * <ReferenceField label="User" source="userId" reference="users" link={false} />
 *
 * @example // Alternatively, you can also pass a custom function to `link`.
 * // It must take reference and record as arguments and return a string
 * <ReferenceField label="User" source="userId" reference="users" link={(record, reference) => "/path/to/${reference}/${record}"} />
 *
 * @default
 * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However
 * backward-compatibility is still kept
 */
export declare const ReferenceField: {
    <RecordType extends Record<string, any> = Record<string, any>, ReferenceRecordType extends RaRecord<Identifier> = RaRecord<Identifier>>(props: ReferenceFieldProps<RecordType, ReferenceRecordType>): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        cellClassName: PropTypes.Requireable<string>;
        headerClassName: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<NonNullable<string | boolean | PropTypes.ReactElementLike>>;
        record: PropTypes.Requireable<any>;
        reference: PropTypes.Validator<string>;
        resource: PropTypes.Requireable<string>;
        sortBy: PropTypes.Requireable<string>;
        sortByOrder: PropTypes.Requireable<"ASC" | "DESC">;
        source: PropTypes.Validator<string>;
        translateChoice: PropTypes.Requireable<NonNullable<boolean | ((...args: any[]) => any)>>;
        link: PropTypes.Requireable<NonNullable<string | boolean | ((...args: any[]) => any)>>;
    };
};
export interface ReferenceFieldProps<RecordType extends Record<string, any> = Record<string, any>, ReferenceRecordType extends RaRecord = RaRecord> extends Omit<FieldProps<RecordType>, 'source'>, Required<Pick<FieldProps<RecordType>, 'source'>> {
    children?: ReactNode;
    queryOptions?: UseQueryOptions<ReferenceRecordType[], Error> & {
        meta?: any;
    };
    reference: string;
    translateChoice?: Function | boolean;
    link?: LinkToType<ReferenceRecordType>;
    sx?: SxProps;
}
/**
 * This intermediate component is made necessary by the useReference hook,
 * which cannot be called conditionally when get(record, source) is empty.
 */
export declare const NonEmptyReferenceField: <RecordType extends Record<string, any> = Record<string, any>, ReferenceRecordType extends RaRecord<Identifier> = RaRecord<Identifier>>({ children, id, reference, queryOptions, link, ...props }: Omit<ReferenceFieldProps<RecordType, ReferenceRecordType>, "source"> & {
    id: Identifier;
}) => JSX.Element;
export declare const ReferenceFieldView: {
    <RecordType extends Record<string, any> = Record<string, any>>(props: ReferenceFieldViewProps<RecordType, RaRecord<Identifier>>): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactElementLike>;
        className: PropTypes.Requireable<string>;
        isLoading: PropTypes.Requireable<boolean>;
        record: PropTypes.Requireable<any>;
        reference: PropTypes.Requireable<string>;
        referenceRecord: PropTypes.Requireable<any>;
        resource: PropTypes.Requireable<string>;
        resourceLinkPath: PropTypes.Validator<NonNullable<NonNullable<string | boolean | ((...args: any[]) => any)>>>;
        source: PropTypes.Requireable<string>;
        translateChoice: PropTypes.Requireable<NonNullable<boolean | ((...args: any[]) => any)>>;
    };
};
export interface ReferenceFieldViewProps<RecordType extends Record<string, any> = Record<string, any>, ReferenceRecordType extends RaRecord = RaRecord> extends FieldProps<RecordType>, UseReferenceResult {
    children?: ReactNode;
    reference: string;
    resource?: string;
    translateChoice?: Function | boolean;
    resourceLinkPath?: LinkToType<ReferenceRecordType>;
    sx?: SxProps;
}
export declare const ReferenceFieldClasses: {
    link: string;
};
//# sourceMappingURL=ReferenceField.d.ts.map