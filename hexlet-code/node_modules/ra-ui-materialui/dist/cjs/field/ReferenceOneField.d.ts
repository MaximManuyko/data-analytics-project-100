import { ReactNode } from 'react';
import PropTypes from 'prop-types';
import { UseQueryOptions } from 'react-query';
import { LinkToType, SortPayload, RaRecord } from 'ra-core';
import { FieldProps } from './types';
/**
 * Render the related record in a one-to-one relationship
 *
 * Expects a single field as child
 *
 * @example // display the bio of the current author
 * <ReferenceOneField reference="bios" target="author_id">
 *     <TextField source="body" />
 * </ReferenceOneField>
 */
export declare const ReferenceOneField: {
    <RecordType extends RaRecord<import("ra-core").Identifier> = RaRecord<import("ra-core").Identifier>, ReferenceRecordType extends RaRecord<import("ra-core").Identifier> = RaRecord<import("ra-core").Identifier>>(props: ReferenceOneFieldProps<RecordType, ReferenceRecordType>): JSX.Element;
    propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<NonNullable<string | boolean | PropTypes.ReactElementLike>>;
        record: PropTypes.Requireable<any>;
        reference: PropTypes.Validator<string>;
        source: PropTypes.Requireable<string>;
        target: PropTypes.Validator<string>;
        queryOptions: PropTypes.Requireable<any>;
    };
    defaultProps: {
        sortable: boolean;
    };
};
export interface ReferenceOneFieldProps<RecordType extends RaRecord = RaRecord, ReferenceRecordType extends RaRecord = RaRecord> extends FieldProps<RecordType> {
    children?: ReactNode;
    reference: string;
    target: string;
    sort?: SortPayload;
    filter?: any;
    link?: LinkToType<RecordType>;
    queryOptions?: UseQueryOptions<{
        data: ReferenceRecordType[];
        total: number;
    }> & {
        meta?: any;
    };
}
//# sourceMappingURL=ReferenceOneField.d.ts.map