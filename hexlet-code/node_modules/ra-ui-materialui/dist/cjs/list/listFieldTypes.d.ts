/// <reference types="react" />
export declare const listFieldTypes: {
    table: {
        component: (props: any) => JSX.Element;
        representation: (props: any, children: any) => string;
    };
    array: {
        component: ({ children, ...props }: {
            [x: string]: any;
            children: any;
        }) => JSX.Element;
        representation: (props: any, children: any) => string;
    };
    boolean: {
        component: {
            <RecordType extends Record<string, any> = Record<string, any>>(props: import("../field").BooleanFieldProps<RecordType>): JSX.Element;
            propTypes: any;
            displayName: string;
        };
        representation: (props: any) => string;
    };
    date: {
        component: {
            <RecordType_1 extends Record<string, any> = Record<string, any>>(props: import("../field").DateFieldProps<RecordType_1>): JSX.Element;
            propTypes: any;
            displayName: string;
        };
        representation: (props: any) => string;
    };
    email: {
        component: {
            <RecordType_2 extends Record<string, any> = Record<string, any>>(props: import("../field").EmailFieldProps<RecordType_2>): JSX.Element;
            propTypes: {
                sortBy: import("prop-types").Requireable<string>;
                sortByOrder: import("prop-types").Requireable<"ASC" | "DESC">;
                source: import("prop-types").Requireable<string>;
                label: import("prop-types").Requireable<NonNullable<string | boolean | import("prop-types").ReactElementLike>>;
                sortable: import("prop-types").Requireable<boolean>;
                className: import("prop-types").Requireable<string>;
                cellClassName: import("prop-types").Requireable<string>;
                headerClassName: import("prop-types").Requireable<string>;
                textAlign: import("prop-types").Requireable<"inherit" | "left" | "right" | "center" | "justify">;
                emptyText: import("prop-types").Requireable<string>;
            };
            displayName: string;
        };
        representation: (props: any) => string;
    };
    id: {
        component: {
            <RecordType_3 extends Record<string, any> = Record<string, any>>(props: import("../field").TextFieldProps<RecordType_3>): JSX.Element;
            propTypes: any;
            displayName: string;
        };
        representation: (props: any) => string;
    };
    number: {
        component: {
            <RecordType_4 extends Record<string, any> = Record<string, any>>(props: import("../field").NumberFieldProps<RecordType_4>): JSX.Element;
            propTypes: any;
            displayName: string;
            defaultProps: {
                textAlign: string;
            };
        };
        representation: (props: any) => string;
    };
    reference: {
        component: {
            <RecordType_5 extends Record<string, any> = Record<string, any>, ReferenceRecordType extends import("ra-core").RaRecord<import("ra-core").Identifier> = import("ra-core").RaRecord<import("ra-core").Identifier>>(props: import("../field").ReferenceFieldProps<RecordType_5, ReferenceRecordType>): JSX.Element;
            propTypes: {
                children: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
                className: import("prop-types").Requireable<string>;
                cellClassName: import("prop-types").Requireable<string>;
                headerClassName: import("prop-types").Requireable<string>;
                label: import("prop-types").Requireable<NonNullable<string | boolean | import("prop-types").ReactElementLike>>;
                record: import("prop-types").Requireable<any>;
                reference: import("prop-types").Validator<string>;
                resource: import("prop-types").Requireable<string>;
                sortBy: import("prop-types").Requireable<string>;
                sortByOrder: import("prop-types").Requireable<"ASC" | "DESC">;
                source: import("prop-types").Validator<string>;
                translateChoice: import("prop-types").Requireable<NonNullable<boolean | ((...args: any[]) => any)>>;
                link: import("prop-types").Requireable<NonNullable<string | boolean | ((...args: any[]) => any)>>;
            };
        };
        representation: (props: any) => string;
    };
    referenceChild: {
        component: () => JSX.Element;
        representation: () => string;
    };
    referenceArray: {
        component: {
            <RecordType_6 extends import("ra-core").RaRecord<import("ra-core").Identifier> = import("ra-core").RaRecord<import("ra-core").Identifier>, ReferenceRecordType_1 extends import("ra-core").RaRecord<import("ra-core").Identifier> = import("ra-core").RaRecord<import("ra-core").Identifier>>(props: import("../field").ReferenceArrayFieldProps<RecordType_6, ReferenceRecordType_1>): JSX.Element;
            propTypes: {
                className: import("prop-types").Requireable<string>;
                children: import("prop-types").Requireable<import("prop-types").ReactNodeLike>;
                label: import("prop-types").Requireable<NonNullable<string | boolean | import("prop-types").ReactElementLike>>;
                record: import("prop-types").Requireable<any>;
                reference: import("prop-types").Validator<string>;
                resource: import("prop-types").Requireable<string>;
                sortBy: import("prop-types").Requireable<string>;
                sortByOrder: import("prop-types").Requireable<"ASC" | "DESC">;
                source: import("prop-types").Validator<string>;
                queryOptions: import("prop-types").Requireable<any>;
                sortable: import("prop-types").Requireable<boolean>;
                cellClassName: import("prop-types").Requireable<string>;
                headerClassName: import("prop-types").Requireable<string>;
                textAlign: import("prop-types").Requireable<"inherit" | "left" | "right" | "center" | "justify">;
                emptyText: import("prop-types").Requireable<string>;
            };
        };
        representation: (props: any) => string;
    };
    referenceArrayChild: {
        component: () => JSX.Element;
        representation: () => string;
    };
    richText: any;
    string: {
        component: {
            <RecordType_3 extends Record<string, any> = Record<string, any>>(props: import("../field").TextFieldProps<RecordType_3>): JSX.Element;
            propTypes: any;
            displayName: string;
        };
        representation: (props: any) => string;
    };
    url: {
        component: {
            <RecordType_7 extends Record<string, any> = Record<string, any>>(props: import("../field").UrlFieldProps<RecordType_7>): JSX.Element;
            propTypes: {
                sortBy: import("prop-types").Requireable<string>;
                sortByOrder: import("prop-types").Requireable<"ASC" | "DESC">;
                source: import("prop-types").Requireable<string>;
                label: import("prop-types").Requireable<NonNullable<string | boolean | import("prop-types").ReactElementLike>>;
                sortable: import("prop-types").Requireable<boolean>;
                className: import("prop-types").Requireable<string>;
                cellClassName: import("prop-types").Requireable<string>;
                headerClassName: import("prop-types").Requireable<string>;
                textAlign: import("prop-types").Requireable<"inherit" | "left" | "right" | "center" | "justify">;
                emptyText: import("prop-types").Requireable<string>;
            };
            displayName: string;
        };
        representation: (props: any) => string;
    };
};
//# sourceMappingURL=listFieldTypes.d.ts.map