var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { CoreAdminContext } from 'ra-core';
import { ThemeProvider, ThemesContext, defaultLightTheme, } from './theme';
export var AdminContext = function (props) {
    var theme = props.theme, _a = props.lightTheme, lightTheme = _a === void 0 ? defaultLightTheme : _a, darkTheme = props.darkTheme, defaultTheme = props.defaultTheme, children = props.children, rest = __rest(props, ["theme", "lightTheme", "darkTheme", "defaultTheme", "children"]);
    return (React.createElement(CoreAdminContext, __assign({}, rest),
        React.createElement(ThemesContext.Provider, { value: {
                lightTheme: theme || lightTheme,
                darkTheme: darkTheme,
                defaultTheme: defaultTheme,
            } },
            React.createElement(ThemeProvider, null, children))));
};
AdminContext.displayName = 'AdminContext';
//# sourceMappingURL=AdminContext.js.map