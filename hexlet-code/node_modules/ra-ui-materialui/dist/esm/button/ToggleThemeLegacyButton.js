import React from 'react';
import { Tooltip, IconButton } from '@mui/material';
import Brightness4Icon from '@mui/icons-material/Brightness4';
import Brightness7Icon from '@mui/icons-material/Brightness7';
import { useTranslate } from 'ra-core';
import { useTheme } from '../theme';
/**
 * Button toggling the theme (light or dark).
 *
 * @deprecated Set the lightTheme and darkTheme props in the <Admin> component.
 *
 * @example
 * import { AppBar, TitlePortal, ToggleThemeLegacyButton } from 'react-admin';
 *
 * const MyAppBar = () => (
 *     <AppBar>
 *         <TitlePortal />
 *         <ToggleThemeButton lightTheme={lightTheme} darkTheme={darkTheme} />
 *     </AppBar>
 * );
 *
 * const MyLayout = props => <Layout {...props} appBar={MyAppBar} />;
 */
export var ToggleThemeLegacyButton = function (props) {
    var translate = useTranslate();
    var darkTheme = props.darkTheme, lightTheme = props.lightTheme;
    var _a = useTheme(), theme = _a[0], setTheme = _a[1];
    // @ts-ignore
    var isDark = theme === 'dark' || (theme === null || theme === void 0 ? void 0 : theme.palette.mode) === 'dark';
    var handleTogglePaletteType = function () {
        setTheme(isDark ? lightTheme : darkTheme);
    };
    var toggleThemeTitle = translate('ra.action.toggle_theme', {
        _: 'Toggle Theme',
    });
    return (React.createElement(Tooltip, { title: toggleThemeTitle, enterDelay: 300 },
        React.createElement(IconButton, { color: "inherit", onClick: handleTogglePaletteType, "aria-label": toggleThemeTitle }, isDark ? React.createElement(Brightness7Icon, null) : React.createElement(Brightness4Icon, null))));
};
//# sourceMappingURL=ToggleThemeLegacyButton.js.map