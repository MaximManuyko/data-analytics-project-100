var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import get from 'lodash/get';
import { ListContextProvider, useRecordContext, useList, } from 'ra-core';
import { fieldPropTypes } from './types';
import { genericMemo } from './genericMemo';
/**
 * Renders an embedded array of objects.
 *
 * ArrayField creates a ListContext with the field value, and renders its children components -
 * usually iterator components like Datagrid, SingleFieldList, or SimpleList.
 *
 * @example // Display all the tags of the current post as `<Chip>` components
 * // const post = {
 * //   id: 123
 * //   tags: [
 * //     { name: 'foo' },
 * //     { name: 'bar' }
 * //   ]
 * // };
 * const PostShow = () => (
 *    <Show>
 *       <SimpleShowLayout>
 *           <ArrayField source="tags">
 *               <SingleFieldList>
 *                   <ChipField source="name" />
 *               </SingleFieldList>
 *           </ArrayField>
 *      </SimpleShowLayout>
 *   </Show>
 * );
 *
 * @example // Display all the backlinks of the current post as a `<Datagrid>`
 * // const post = {
 * //   id: 123
 * //   backlinks: [
 * //       {
 * //           uuid: '34fdf393-f449-4b04-a423-38ad02ae159e',
 * //           date: '2012-08-10T00:00:00.000Z',
 * //           url: 'http://example.com/foo/bar.html',
 * //       },
 * //       {
 * //           uuid: 'd907743a-253d-4ec1-8329-404d4c5e6cf1',
 * //           date: '2012-08-14T00:00:00.000Z',
 * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',
 * //       }
 * //    ]
 * // };
 * <ArrayField source="backlinks">
 *     <Datagrid>
 *         <DateField source="date" />
 *         <UrlField source="url" />
 *     </Datagrid>
 * </ArrayField>
 *
 * @example // If you need to render a collection of strings, it's often simpler to write your own component
 * const TagsField = () => {
 *     const record = useRecordContext();
 *     return (
 *         <ul>
 *             {record.tags.map(item => (
 *                 <li key={item.name}>{item.name}</li>
 *             ))}
 *         </ul>
 *     );
 * };
 *
 * @see useListContext
 */
var ArrayFieldImpl = function (props) {
    var children = props.children, resource = props.resource, source = props.source, perPage = props.perPage, sort = props.sort, filter = props.filter;
    var record = useRecordContext(props);
    var data = get(record, source, emptyArray) ||
        emptyArray;
    var listContext = useList({ data: data, resource: resource, perPage: perPage, sort: sort, filter: filter });
    return (React.createElement(ListContextProvider, { value: listContext }, children));
};
ArrayFieldImpl.propTypes = __assign({}, fieldPropTypes);
ArrayFieldImpl.displayName = 'ArrayFieldImpl';
export var ArrayField = genericMemo(ArrayFieldImpl);
var emptyArray = [];
//# sourceMappingURL=ArrayField.js.map