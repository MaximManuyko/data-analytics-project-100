import { ReactElement, ReactNode, ElementType } from 'react';
import PropTypes from 'prop-types';
import { SxProps } from '@mui/system';
import { RaRecord } from 'ra-core';
export declare const ListView: {
    <RecordType extends RaRecord<import("ra-core").Identifier> = any>(props: ListViewProps): JSX.Element;
    propTypes: {
        actions: PropTypes.Requireable<NonNullable<boolean | PropTypes.ReactElementLike>>;
        aside: PropTypes.Requireable<PropTypes.ReactElementLike>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        className: PropTypes.Requireable<string>;
        component: (props: any, propName: any, componentName: any) => Error;
        emptyWhileLoading: PropTypes.Requireable<boolean>;
        filters: PropTypes.Requireable<NonNullable<PropTypes.ReactElementLike | PropTypes.ReactElementLike[]>>;
        hasCreate: PropTypes.Requireable<boolean>;
        pagination: PropTypes.Requireable<NonNullable<boolean | PropTypes.ReactElementLike>>;
        title: PropTypes.Requireable<NonNullable<string | PropTypes.ReactElementLike>>;
    };
};
export interface ListViewProps {
    /**
     * The actions to display in the toolbar. defaults to Filter + Create + Export.
     *
     * @see https://marmelab.com/react-admin/List.html#actions
     * @example
     * import {
     *     CreateButton,
     *     DatagridConfigurable,
     *     ExportButton,
     *     FilterButton,
     *     List,
     *     SelectColumnsButton,
     *     TopToolbar,
     * } from 'react-admin';
     * import IconEvent from '@mui/icons-material/Event';
     *
     * const ListActions = () => (
     *     <TopToolbar>
     *         <SelectColumnsButton />
     *         <FilterButton/>
     *         <CreateButton/>
     *         <ExportButton/>
     *     </TopToolbar>
     * );
     *
     * export const PostList = () => (
     *     <List actions={<ListActions/>}>
     *         <DatagridConfigurable>
     *             ...
     *         </DatagridConfigurable>
     *     </List>
     * );
     */
    actions?: ReactElement | false;
    /**
     * The content to render as a sidebar.
     * @see https://marmelab.com/react-admin/List.html#aside
     * @example
     * import { List, useListContext } from 'react-admin';
     * import { Typography } from '@mui/material';
     *
     * const Aside = () => {
     *     const { data, isLoading } = useListContext();
     *     if (isLoading) return null;
     *     return (
     *         <div style={{ width: 200, margin: '4em 1em' }}>
     *             <Typography variant="h6">Posts stats</Typography>
     *             <Typography variant="body2">
     *                 Total views: {data.reduce((sum, post) => sum + post.views, 0)}
     *             </Typography>
     *         </div>
     *     );
     * };
     *
     * const PostList = () => (
     *     <List aside={<Aside />}>
     *         ...
     *     </List>
     * );
     */
    aside?: ReactElement;
    /**
     * @deprecated pass the bulkActionButtons prop to the List child (Datagrid or SimpleList) instead
     */
    bulkActionButtons?: ReactElement | false;
    /**
     * A class name to apply to the root div element
     */
    className?: string;
    /**
     * The components rendering the list of records. Usually a <Datagrid> or <SimpleList>.
     *
     * @see https://marmelab.com/react-admin/List.html#children
     * @example
     * import { List, Datagrid, TextField, DateField, NumberField, BooleanField, ReferenceManyCount } from 'react-admin';
     *
     * export const BookList = () => (
     *     <List>
     *         <Datagrid rowClick="edit">
     *             <TextField source="id" />
     *             <TextField source="title" />
     *             <DateField source="published_at" />
     *             <ReferenceManyCount label="Nb comments" reference="comments" target="post_id" link />
     *             <BooleanField source="commentable" label="Com." />
     *             <NumberField source="nb_views" label="Views" />
     *         </Datagrid>
     *     </List>
     * );
     */
    children: ReactNode;
    /**
     * The component used to display the list. Defaults to <Card>.
     *
     * @see https://marmelab.com/react-admin/List.html#component
     * @example
     * import { List } from 'react-admin';
     *
     * const PostList = () => (
     *     <List component="div">
     *         ...
     *     </List>
     * );
     */
    component?: ElementType;
    /**
     * The component to display when the list is empty.
     *
     * @see https://marmelab.com/react-admin/List.html#empty
     * @example
     * import { CreateButton, List } from 'react-admin';
     * import { Box, Button, Typography } from '@mui/material';
     *
     * const Empty = () => (
     *     <Box textAlign="center" m={1}>
     *         <Typography variant="h4" paragraph>
     *             No products available
     *         </Typography>
     *         <Typography variant="body1">
     *             Create one or import products from a file
     *         </Typography>
     *         <CreateButton />
     *         <Button onClick={...}>Import</Button>
     *     </Box>
     * );
     *
     * const ProductList = () => (
     *     <List empty={<Empty />}>
     *         ...
     *     </List>
     * );
     */
    empty?: ReactElement | false;
    /**
     * Set to true to return null while the list is loading.
     *
     * @see https://marmelab.com/react-admin/List.html#emptywhileloading
     * @example
     * import { List } from 'react-admin';
     * import { SimpleBookList } from './BookList';
     *
     * const BookList = () => (
     *     <List emptyWhileLoading>
     *         <SimpleBookList />
     *     </List>
     * );
     */
    emptyWhileLoading?: boolean;
    /**
     * The filter inputs to display in the toolbar.
     *
     * @see https://marmelab.com/react-admin/List.html#filters
     * @example
     * import { List, TextInput } from 'react-admin';
     *
     * const postFilters = [
     *     <TextInput label="Search" source="q" alwaysOn />,
     *     <TextInput label="Title" source="title" defaultValue="Hello, World!" />,
     * ];
     *
     * export const PostList = () => (
     *     <List filters={postFilters}>
     *         ...
     *     </List>
     * );
     */
    filters?: ReactElement | ReactElement[];
    /**
     * Set to true to force a Create button in the toolbar, even if there is no create view declared in Resource
     *
     * @see https://marmelab.com/react-admin/List.html#hascreate
     * @example
     * import { List } from 'react-admin';
     *
     * export const PostList = () => (
     *     <List hasCreate={false}>
     *         ...
     *     </List>
     * );
     */
    hasCreate?: boolean;
    /**
     * The pagination component to display. defaults to <Pagination />
     *
     * @see https://marmelab.com/react-admin/List.html#pagination
     * @example
     * import { Pagination, List } from 'react-admin';
     *
     * const PostPagination = props => <Pagination rowsPerPageOptions={[10, 25, 50, 100]} {...props} />;
     *
     * export const PostList = () => (
     *     <List pagination={<PostPagination />}>
     *         ...
     *     </List>
     * );
     */
    pagination?: ReactElement | false;
    /**
     * The page title (main title) to display above the data. Defaults to the humanized resource name.
     *
     * @see https://marmelab.com/react-admin/List.html#title
     * @example
     * import { List } from 'react-admin';
     *
     * export const PostList = () => (
     *     <List title="List of posts">
     *         ...
     *     </List>
     * );
     */
    title?: string | ReactElement;
    /**
     * The CSS styles to apply to the component.
     *
     * @see https://marmelab.com/react-admin/List.html#sx-css-api
     * @example
     * const PostList = () => (
     *     <List
     *         sx={{
     *             backgroundColor: 'yellow',
     *             '& .RaList-content': {
     *                 backgroundColor: 'red',
     *             },
     *         }}
     *     >
     *             ...
     *     </List>
     * );
     */
    sx?: SxProps;
}
export declare const ListClasses: {
    main: string;
    content: string;
    actions: string;
    noResults: string;
};
//# sourceMappingURL=ListView.d.ts.map